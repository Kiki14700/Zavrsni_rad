package org.eclipse.scout.apps.xlsxreader.files.klijenti;

import javax.annotation.Generated;

import org.eclipse.scout.rt.shared.data.basic.table.AbstractTableRowData;
import org.eclipse.scout.rt.shared.data.form.AbstractFormData;
import org.eclipse.scout.rt.shared.data.form.fields.AbstractValueFieldData;
import org.eclipse.scout.rt.shared.data.form.fields.tablefield.AbstractTableFieldBeanData;
import org.eclipse.scout.rt.shared.data.form.properties.AbstractPropertyData;

/**
 * <b>NOTE:</b><br>
 * This class is auto generated by the Scout SDK. No manual modifications
 * recommended.
 */
@Generated(value = "org.eclipse.scout.apps.xlsxreader.files.klijenti.ClientsFileDetailsForm", comments = "This class is auto generated by the Scout SDK. No manual modifications recommended.")
public class ClientsFileDetailsFormData extends AbstractFormData {
	private static final long serialVersionUID = 1L;

	public Company getCompany() {
		return getFieldByClass(Company.class);
	}

	public Date getDate() {
		return getFieldByClass(Date.class);
	}

	/**
	 * access method for property FileID.
	 */
	public Integer getFileID() {
		return getFileIDProperty().getValue();
	}

	/**
	 * access method for property FileID.
	 */
	public void setFileID(Integer fileID) {
		getFileIDProperty().setValue(fileID);
	}

	public FileIDProperty getFileIDProperty() {
		return getPropertyByClass(FileIDProperty.class);
	}

	public ImportInfoTable getImportInfoTable() {
		return getFieldByClass(ImportInfoTable.class);
	}

	public ImportType getImportType() {
		return getFieldByClass(ImportType.class);
	}

	public SuccessImport getSuccessImport() {
		return getFieldByClass(SuccessImport.class);
	}

	public Time getTime() {
		return getFieldByClass(Time.class);
	}

	public static class Company extends AbstractValueFieldData<Long> {
		private static final long serialVersionUID = 1L;
	}

	public static class Date extends AbstractValueFieldData<java.util.Date> {
		private static final long serialVersionUID = 1L;
	}

	public static class FileIDProperty extends AbstractPropertyData<Integer> {
		private static final long serialVersionUID = 1L;
	}

	public static class ImportInfoTable extends AbstractTableFieldBeanData {
		private static final long serialVersionUID = 1L;

		@Override
		public ImportInfoTableRowData addRow() {
			return (ImportInfoTableRowData) super.addRow();
		}

		@Override
		public ImportInfoTableRowData addRow(int rowState) {
			return (ImportInfoTableRowData) super.addRow(rowState);
		}

		@Override
		public ImportInfoTableRowData createRow() {
			return new ImportInfoTableRowData();
		}

		@Override
		public Class<? extends AbstractTableRowData> getRowType() {
			return ImportInfoTableRowData.class;
		}

		@Override
		public ImportInfoTableRowData[] getRows() {
			return (ImportInfoTableRowData[]) super.getRows();
		}

		@Override
		public ImportInfoTableRowData rowAt(int index) {
			return (ImportInfoTableRowData) super.rowAt(index);
		}

		public void setRows(ImportInfoTableRowData[] rows) {
			super.setRows(rows);
		}

		public static class ImportInfoTableRowData extends AbstractTableRowData {
			private static final long serialVersionUID = 1L;
			public static final String code = "code";
			public static final String info = "info";
			private String m_code;
			private String m_info;

			public String getCode() {
				return m_code;
			}

			public void setCode(String newCode) {
				m_code = newCode;
			}

			public String getInfo() {
				return m_info;
			}

			public void setInfo(String newInfo) {
				m_info = newInfo;
			}
		}
	}

	public static class ImportType extends AbstractValueFieldData<Long> {
		private static final long serialVersionUID = 1L;
	}

	public static class SuccessImport extends AbstractValueFieldData<String> {
		private static final long serialVersionUID = 1L;
	}

	public static class Time extends AbstractValueFieldData<String> {
		private static final long serialVersionUID = 1L;
	}
}
